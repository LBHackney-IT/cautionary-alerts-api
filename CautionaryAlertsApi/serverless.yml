service: cautionary-alerts-api
provider:
  name: aws
  runtime: dotnet8
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2

package:
  artifact: ./bin/release/net8.0/cautionary-alerts-api.zip

functions:
  cautionaryAlertsApi:
    name: ${self:service}-${self:provider.stage}
    handler: CautionaryAlertsApi::CautionaryAlertsApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    timeout: 30
    environment:
      CONNECTION_STRING: Host=${ssm:/uh-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/uh-api/${self:provider.stage}/postgres-port};Database=uh_mirror;Username=${ssm:/uh-api/${self:provider.stage}/postgres-username};Password=${ssm:/uh-api/${self:provider.stage}/postgres-password}
      SPREADSHEET_ID: ${ssm:/${self:service}/${self:provider.stage}/googlesheet-spreadsheetid}
      CREDENTIAL_JSON: ${ssm:/${self:service}/${self:provider.stage}/googlesheet-credentialjson}
      MANAGE_CAUTIONARY_ALERT_ALLOWED_GROUPS: ${ssm:/tl-housing/${self:provider.stage}/create-cautionary-alerts-allowed-groups}
      CAUTIONARY_ALERTS_SNS_ARN: ${ssm:/sns-topic/${self:provider.stage}/cautionary-alerts/arn}

    events:
      - http:
          path: /{proxy+}
          method: ANY
          authorizer:
            arn: ${self:custom.authorizerArns.${opt:stage}}
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-correlation-id
              - X-Hackney-User
            allowCredentials: false
          private: true
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: postToSns
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sns:Publish"
                  Resource:
                    - ${ssm:/sns-topic/${self:provider.stage}/cautionary-alerts/arn}
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  authorizerArns:
    development: arn:aws:lambda:eu-west-2:859159924354:function:api-auth-verify-token-development-apiauthverifytoken
    staging:     arn:aws:lambda:eu-west-2:715003523189:function:api-auth-verify-token-new-staging-apiauthverifytokennew
    production:  arn:aws:lambda:eu-west-2:153306643385:function:api-auth-verify-token-production-apiauthverifytoken
  vpc:
    development:
      securityGroupIds:
        - sg-07aa5b4bfe5431d73
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      securityGroupIds:
        - sg-00be85a006bff97e8
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      securityGroupIds:
        - sg-038eb450496ec5548
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
